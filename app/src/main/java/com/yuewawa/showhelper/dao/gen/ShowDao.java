package com.yuewawa.showhelper.dao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yuewawa.showhelper.entity.Show;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SHOW".
*/
public class ShowDao extends AbstractDao<Show, Long> {

    public static final String TABLENAME = "SHOW";

    /**
     * Properties of entity Show.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ShowId = new Property(0, Long.class, "showId", true, "_id");
        public final static Property ShowName = new Property(1, String.class, "showName", false, "SHOW_NAME");
        public final static Property LatestSeason = new Property(2, int.class, "latestSeason", false, "LATEST_SEASON");
        public final static Property TotalEpisodes = new Property(3, String.class, "totalEpisodes", false, "TOTAL_EPISODES");
        public final static Property UpdatedEpisode = new Property(4, String.class, "updatedEpisode", false, "UPDATED_EPISODE");
        public final static Property UpdatedWeek = new Property(5, String.class, "updatedWeek", false, "UPDATED_WEEK");
        public final static Property UpdatedTime = new Property(6, String.class, "updatedTime", false, "UPDATED_TIME");
        public final static Property UpdatedDate = new Property(7, String.class, "updatedDate", false, "UPDATED_DATE");
        public final static Property NextDate = new Property(8, String.class, "nextDate", false, "NEXT_DATE");
        public final static Property ShowRegion = new Property(9, String.class, "showRegion", false, "SHOW_REGION");
        public final static Property ShowType = new Property(10, String.class, "showType", false, "SHOW_TYPE");
        public final static Property ShowStatus = new Property(11, String.class, "showStatus", false, "SHOW_STATUS");
        public final static Property ShowImage = new Property(12, byte[].class, "showImage", false, "SHOW_IMAGE");
        public final static Property EpisodesOfWeek = new Property(13, int.class, "episodesOfWeek", false, "EPISODES_OF_WEEK");
    }

    private DaoSession daoSession;


    public ShowDao(DaoConfig config) {
        super(config);
    }
    
    public ShowDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SHOW\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: showId
                "\"SHOW_NAME\" TEXT," + // 1: showName
                "\"LATEST_SEASON\" INTEGER NOT NULL ," + // 2: latestSeason
                "\"TOTAL_EPISODES\" TEXT," + // 3: totalEpisodes
                "\"UPDATED_EPISODE\" TEXT," + // 4: updatedEpisode
                "\"UPDATED_WEEK\" TEXT," + // 5: updatedWeek
                "\"UPDATED_TIME\" TEXT," + // 6: updatedTime
                "\"UPDATED_DATE\" TEXT," + // 7: updatedDate
                "\"NEXT_DATE\" TEXT," + // 8: nextDate
                "\"SHOW_REGION\" TEXT," + // 9: showRegion
                "\"SHOW_TYPE\" TEXT," + // 10: showType
                "\"SHOW_STATUS\" TEXT," + // 11: showStatus
                "\"SHOW_IMAGE\" BLOB," + // 12: showImage
                "\"EPISODES_OF_WEEK\" INTEGER NOT NULL );"); // 13: episodesOfWeek
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SHOW\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Show entity) {
        stmt.clearBindings();
 
        Long showId = entity.getShowId();
        if (showId != null) {
            stmt.bindLong(1, showId);
        }
 
        String showName = entity.getShowName();
        if (showName != null) {
            stmt.bindString(2, showName);
        }
        stmt.bindLong(3, entity.getLatestSeason());
 
        String totalEpisodes = entity.getTotalEpisodes();
        if (totalEpisodes != null) {
            stmt.bindString(4, totalEpisodes);
        }
 
        String updatedEpisode = entity.getUpdatedEpisode();
        if (updatedEpisode != null) {
            stmt.bindString(5, updatedEpisode);
        }
 
        String updatedWeek = entity.getUpdatedWeek();
        if (updatedWeek != null) {
            stmt.bindString(6, updatedWeek);
        }
 
        String updatedTime = entity.getUpdatedTime();
        if (updatedTime != null) {
            stmt.bindString(7, updatedTime);
        }
 
        String updatedDate = entity.getUpdatedDate();
        if (updatedDate != null) {
            stmt.bindString(8, updatedDate);
        }
 
        String nextDate = entity.getNextDate();
        if (nextDate != null) {
            stmt.bindString(9, nextDate);
        }
 
        String showRegion = entity.getShowRegion();
        if (showRegion != null) {
            stmt.bindString(10, showRegion);
        }
 
        String showType = entity.getShowType();
        if (showType != null) {
            stmt.bindString(11, showType);
        }
 
        String showStatus = entity.getShowStatus();
        if (showStatus != null) {
            stmt.bindString(12, showStatus);
        }
 
        byte[] showImage = entity.getShowImage();
        if (showImage != null) {
            stmt.bindBlob(13, showImage);
        }
        stmt.bindLong(14, entity.getEpisodesOfWeek());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Show entity) {
        stmt.clearBindings();
 
        Long showId = entity.getShowId();
        if (showId != null) {
            stmt.bindLong(1, showId);
        }
 
        String showName = entity.getShowName();
        if (showName != null) {
            stmt.bindString(2, showName);
        }
        stmt.bindLong(3, entity.getLatestSeason());
 
        String totalEpisodes = entity.getTotalEpisodes();
        if (totalEpisodes != null) {
            stmt.bindString(4, totalEpisodes);
        }
 
        String updatedEpisode = entity.getUpdatedEpisode();
        if (updatedEpisode != null) {
            stmt.bindString(5, updatedEpisode);
        }
 
        String updatedWeek = entity.getUpdatedWeek();
        if (updatedWeek != null) {
            stmt.bindString(6, updatedWeek);
        }
 
        String updatedTime = entity.getUpdatedTime();
        if (updatedTime != null) {
            stmt.bindString(7, updatedTime);
        }
 
        String updatedDate = entity.getUpdatedDate();
        if (updatedDate != null) {
            stmt.bindString(8, updatedDate);
        }
 
        String nextDate = entity.getNextDate();
        if (nextDate != null) {
            stmt.bindString(9, nextDate);
        }
 
        String showRegion = entity.getShowRegion();
        if (showRegion != null) {
            stmt.bindString(10, showRegion);
        }
 
        String showType = entity.getShowType();
        if (showType != null) {
            stmt.bindString(11, showType);
        }
 
        String showStatus = entity.getShowStatus();
        if (showStatus != null) {
            stmt.bindString(12, showStatus);
        }
 
        byte[] showImage = entity.getShowImage();
        if (showImage != null) {
            stmt.bindBlob(13, showImage);
        }
        stmt.bindLong(14, entity.getEpisodesOfWeek());
    }

    @Override
    protected final void attachEntity(Show entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Show readEntity(Cursor cursor, int offset) {
        Show entity = new Show( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // showId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // showName
            cursor.getInt(offset + 2), // latestSeason
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // totalEpisodes
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // updatedEpisode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // updatedWeek
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // updatedTime
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // updatedDate
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // nextDate
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // showRegion
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // showType
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // showStatus
            cursor.isNull(offset + 12) ? null : cursor.getBlob(offset + 12), // showImage
            cursor.getInt(offset + 13) // episodesOfWeek
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Show entity, int offset) {
        entity.setShowId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setShowName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLatestSeason(cursor.getInt(offset + 2));
        entity.setTotalEpisodes(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUpdatedEpisode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUpdatedWeek(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUpdatedTime(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setUpdatedDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setNextDate(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setShowRegion(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setShowType(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setShowStatus(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setShowImage(cursor.isNull(offset + 12) ? null : cursor.getBlob(offset + 12));
        entity.setEpisodesOfWeek(cursor.getInt(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Show entity, long rowId) {
        entity.setShowId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Show entity) {
        if(entity != null) {
            return entity.getShowId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Show entity) {
        return entity.getShowId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
